%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 95 24
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 95 24
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
5.0899873 20.60943 m
5.5020289 20.852205 5.9328923 21.066874 6.3824501 21.253563 c
7.3304005 21.646021 8.3072195 21.890194 9.3132877 21.985701 c
10.403291 20.744871 l
9.9061699 19.468178 l
8.9243917 19.271822 8.0004768 18.915228 7.1340446 18.39814 c
7.0708394 18.360497 7.0083976 18.321836 6.9465914 18.282158 c
6.7625713 19.963135 l
5.0899873 20.60943 l
W*
0 0 95 24 rc
0.089987084 26.985701 m
15.403291 26.985701 l
15.403291 13.282158 l
0.089987084 13.282158 l
h
f
Q
q
4.6146131 20.311718 m
6.3444252 19.642405 l
6.525393 17.994364 l
5.5890155 17.304831 4.8587861 16.425299 4.3362303 15.355644 c
4.2895579 15.260391 4.2455559 15.164757 4.2038431 15.068995 c
2.9963319 16.543953 l
1.0128088 16.125298 l
1.5070045 17.189993 2.1709766 18.142902 3.0048525 18.984028 c
3.5021002 19.485472 4.0388989 19.927908 4.6146131 20.311718 c
W*
0 0 95 24 rc
-3.9871912 25.311718 m
11.525393 25.311718 l
11.525393 10.068995 l
-3.9871912 10.068995 l
h
f
Q
q
15.99663 8.6697588 m
16.182049 8.982605 16.335674 9.3009205 16.457378 9.6248302 c
18.330133 7.3573294 l
21.472462 8.0346546 l
21.29302 7.5389328 21.079622 7.0538936 20.833414 6.5791554 c
20.18712 5.3336196 19.335058 4.2523913 18.276976 3.3349628 c
17.20236 2.4043081 15.988491 1.7249478 14.634222 1.2980268 c
14.607261 1.2895062 14.5803 1.2813671 14.553339 1.2728465 c
12.224286 3.2422533 l
12.834846 5.923831 l
12.850106 5.9300628 12.86524 5.9364214 12.880501 5.9429073 c
14.214549 6.5094643 15.253175 7.4187541 15.99663 8.6697588 c
W*
0 0 95 24 rc
7.2242861 14.62483 m
26.472462 14.62483 l
26.472462 -3.7271535 l
7.2242861 -3.7271535 l
h
f
Q
q
19.930485 19.266989 m
20.122643 19.001705 20.302975 18.726501 20.473133 18.441761 c
21.190771 17.236919 21.686749 15.947509 21.961061 14.574164 c
22.233339 13.211756 22.271873 11.842861 22.076916 10.468118 c
21.983444 9.8070698 21.838339 9.163064 21.641474 8.534955 c
18.503725 7.8600459 l
16.622068 10.13683 l
16.84691 10.972868 16.866369 11.844642 16.680822 12.751897 c
16.460814 13.827656 15.991797 14.745975 15.273649 15.506345 c
18.664347 15.907958 l
19.930485 19.266989 l
W*
0 0 95 24 rc
10.273649 24.266989 m
27.198984 24.266989 l
27.198984 2.8600457 l
10.273649 2.8600457 l
h
f
Q
q
0.79394335 15.618894 m
2.8207054 16.046068 l
4.0148635 14.588408 l
3.6493671 13.542279 3.5578022 12.45393 3.7397873 11.323994 c
3.7911654 11.003009 3.8618739 10.690671 3.9511495 10.387616 c
1.8113303 10.875835 l
0.27393144 9.0594177 l
0.089530058 9.8639164 -0.0017804272 10.686474 0 11.526454 c
0.0027978143 12.926888 0.26235867 14.278613 0.77906406 15.580741 c
0.78389668 15.593586 0.78885645 15.60643 0.79394335 15.618894 c
W*
0 0 95 24 rc
-5.0000257 21.046068 m
9.014863 21.046068 l
9.014863 4.0594177 l
-5.0000257 4.0594177 l
h
f
Q
q
4.1192727 9.885663 m
4.426651 9.0723896 4.8795152 8.3267717 5.4777389 7.6489377 c
5.9299674 7.1369381 6.4338284 6.7126875 6.9889398 6.3759322 c
4.8642545 5.1602821 l
4.979219 2.3923538 l
4.278748 2.8308475 3.6349964 3.3516223 3.0474555 3.9544241 c
2.0619891 4.9653254 1.3068336 6.1260366 0.78211623 7.437067 c
0.63917339 7.7954416 0.51556087 8.1576309 0.41204172 8.5237637 c
1.9799622 10.374264 l
4.1192727 9.885663 l
W*
0 0 95 24 rc
-4.5879583 15.374264 m
11.98894 15.374264 l
11.98894 -2.6076462 l
-4.5879583 -2.6076462 l
h
f
Q
q
7.4518509 6.1205683 m
7.9089122 5.8933096 8.3978939 5.7198448 8.9180326 5.6001749 c
10.083831 5.3299313 11.220125 5.3755865 12.326915 5.7356143 c
11.722206 3.0731127 l
14.028876 1.1230363 l
12.875032 0.82125384 11.695881 0.69217288 10.492185 0.73541182 c
9.0874281 0.78106707 7.7393899 1.0783985 6.4466724 1.6288048 c
6.1003795 1.7758172 5.7659135 1.939235 5.4423847 2.1188037 c
5.3276739 4.9051723 l
7.4518509 6.1205683 l
W*
0 0 95 24 rc
0.32767412 11.120568 m
19.028875 11.120568 l
19.028875 -4.2727246 l
0.32767412 -4.2727246 l
h
f
Q
q
19.606064 19.69302 m
18.33713 16.326105 l
14.848254 15.913426 l
14.746262 16.001684 14.640962 16.087145 14.531339 16.170317 c
13.393009 17.035095 12.103853 17.5415 10.664759 17.689148 c
10.33945 17.720432 10.021516 17.729843 9.7107048 17.718018 c
10.926101 20.83707 l
8.301115 23.826408 l
9.0904799 23.894573 9.8784456 23.916702 10.664759 23.893047 c
11.138607 23.881092 11.607877 23.844595 12.074095 23.784187 c
12.730182 23.699108 13.379021 23.565577 14.020228 23.384226 c
15.376533 23.002579 16.613293 22.383245 17.730129 21.525843 c
18.434797 20.984846 19.06011 20.374161 19.606064 19.69302 c
W*
0 0 95 24 rc
3.3011148 28.902208 m
24.606064 28.902208 l
24.606064 10.913426 l
3.3011148 10.913426 l
h
f
Q
q
31.202623 11.225689 m
28.717274 11.225689 l
28.096287 8.0852699 l
30.950819 8.0852699 l
30.581762 6.2215438 l
25.644003 6.2215438 l
27.810909 17.540356 l
32.546211 17.540356 l
32.176769 15.693035 l
29.574041 15.693035 l
29.019566 13.005989 l
31.555403 13.005989 l
31.202623 11.225689 l
W*
0 0 95 24 rc
20.644003 22.540356 m
37.546211 22.540356 l
37.546211 1.2215439 l
20.644003 1.2215439 l
h
f
Q
q
33.077793 6.2215438 m
32.725651 17.540356 l
35.059666 17.540356 l
34.908329 11.813612 l
34.875263 10.789357 34.807606 9.4794712 34.740585 8.6061716 c
34.774158 8.6061716 l
35.009178 9.4794712 35.395531 10.80589 35.748688 11.813612 c
37.780155 17.540356 l
40.097893 17.540356 l
35.362209 6.2215438 l
33.077793 6.2215438 l
W*
0 0 95 24 rc
27.725651 22.540356 m
45.097893 22.540356 l
45.097893 1.2215439 l
27.725651 1.2215439 l
h
f
Q
q
43.919453 11.225689 m
41.434483 11.225689 l
40.812733 8.0852699 l
43.667774 8.0852699 l
43.298084 6.2215438 l
38.360832 6.2215438 l
40.527485 17.540356 l
45.263039 17.540356 l
44.8936 15.693035 l
42.290741 15.693035 l
41.736267 13.005989 l
44.272232 13.005989 l
43.919453 11.225689 l
W*
0 0 95 24 rc
33.360832 22.540356 m
50.263039 22.540356 l
50.263039 1.2215439 l
33.360832 1.2215439 l
h
f
Q
q
44.380836 6.2215438 m
46.547615 17.540356 l
48.461575 17.540356 l
49.335129 13.039563 l
49.620506 11.545403 49.804909 10.470025 49.888844 9.5294504 c
49.922543 9.5294504 l
50.074005 10.772316 50.275448 12.72023 50.627846 14.601125 c
51.182198 17.540356 l
52.996071 17.540356 l
50.82967 6.2215438 l
49.032967 6.2215438 l
48.125839 10.436324 l
47.77293 12.015182 47.672211 12.787505 47.554958 14.198366 c
47.521381 14.198366 l
47.3703 13.056477 47.118496 11.192243 46.748425 9.2276678 c
46.177544 6.2215438 l
44.380836 6.2215438 l
W*
0 0 95 24 rc
39.380836 22.540356 m
57.996071 22.540356 l
57.996071 1.2215439 l
39.380836 1.2215439 l
h
f
Q
q
54.973614 15.558613 m
53.008659 15.558613 l
53.395138 17.540356 l
59.424175 17.540356 l
59.037697 15.558613 l
57.072613 15.558613 l
55.292568 6.2215438 l
53.193062 6.2215438 l
54.973614 15.558613 l
W*
0 0 95 24 rc
48.008659 22.540356 m
64.424171 22.540356 l
64.424171 1.2215439 l
48.008659 1.2215439 l
h
f
Q
q
60.682938 8.3710279 m
61.052376 8.152544 61.639915 7.9846754 62.244625 7.9846754 c
63.202114 7.9513564 63.873463 8.5388975 63.873463 9.4291105 c
63.873463 10.184648 63.453789 10.621361 62.74836 11.326537 c
61.858273 12.166264 61.4049 13.072883 61.4049 14.063817 c
61.4049 16.162941 62.882908 17.641077 65.099159 17.641077 c
65.972588 17.641077 66.527061 17.456295 66.795776 17.288298 c
66.224518 15.474551 l
65.888779 15.659334 65.519211 15.777097 64.998817 15.777097 c
64.108604 15.777097 63.504025 15.205961 63.487492 14.332535 c
63.487492 13.795354 63.705849 13.375427 64.612595 12.569276 c
65.536255 11.746592 65.972588 10.755656 65.972588 9.8487825 c
65.972588 7.4976015 64.410767 6.1205683 62.261539 6.1205683 c
61.136436 6.1205683 60.414093 6.3726258 60.14563 6.5404949 c
60.682938 8.3710279 l
W*
0 0 95 24 rc
55.14563 22.641077 m
71.795776 22.641077 l
71.795776 1.1205683 l
55.14563 1.1205683 l
h
f
Q
q
68.827377 15.558613 m
66.862419 15.558613 l
67.249023 17.540356 l
73.277428 17.540356 l
72.891457 15.558613 l
70.926247 15.558613 l
69.146454 6.2215438 l
67.046822 6.2215438 l
68.827377 15.558613 l
W*
0 0 95 24 rc
61.862419 22.540356 m
78.277428 22.540356 l
78.277428 1.2215439 l
61.862419 1.2215439 l
h
f
Q
q
75.697281 15.474551 m
74.655853 14.41685 74.067932 11.259263 74.067932 9.5799379 c
74.067932 8.9419098 74.151871 7.9343147 75.025299 7.9343147 c
75.260948 7.9343147 75.512878 8.0518236 75.713554 8.2703066 c
76.839043 9.3784962 77.325989 13.022776 77.325989 14.248855 c
77.325989 14.970691 77.225266 15.827331 76.45256 15.827331 c
76.184227 15.827331 75.932297 15.709568 75.697281 15.474551 c
h
79.492264 14.080858 m
79.492264 11.67919 78.703278 8.6564054 77.208481 7.1619911 c
76.503304 6.4564333 75.697281 6.0871215 74.705833 6.0871215 c
72.254318 6.0871215 71.901665 8.5388975 71.901665 9.7813807 c
71.901665 12.082074 72.691284 15.10524 74.252975 16.633482 c
74.924957 17.288298 75.747765 17.674524 76.738701 17.674524 c
79.189972 17.674524 79.492264 15.424191 79.492264 14.080858 c
79.492264 14.080858 l
h
W*
0 0 95 24 rc
66.901665 22.674524 m
84.492264 22.674524 l
84.492264 1.0871217 l
66.901665 1.0871217 l
h
f
Q
q
82.410637 12.38462 m
82.897835 12.38462 l
83.955154 12.38462 84.660583 13.509977 84.660583 14.702228 c
84.660583 15.306683 84.408783 15.945093 83.619293 15.945093 c
83.401443 15.945093 83.199997 15.928052 83.065453 15.894605 c
82.410637 12.38462 l
h
81.318848 17.389019 m
82.024025 17.506783 82.813393 17.590843 83.569435 17.590843 c
84.543076 17.590843 85.483528 17.405806 86.071449 16.818138 c
86.541611 16.347979 86.810196 15.693035 86.810196 14.953903 c
86.810196 13.291493 85.802986 11.964566 84.509628 11.528234 c
84.509628 11.494407 l
85.131126 11.209029 85.39959 10.553832 85.433167 9.2944345 c
85.466995 8.0349092 85.500443 6.6412163 85.61795 6.2215438 c
83.502167 6.2215438 l
83.451805 6.5404949 83.417976 7.6822572 83.417976 8.9251223 c
83.417976 10.302156 83.132347 10.755656 82.42717 10.755656 c
82.074516 10.755656 l
81.234917 6.2215438 l
79.186028 6.2215438 l
81.318848 17.389019 l
81.318848 17.389019 l
h
W*
0 0 95 24 rc
74.186028 22.590843 m
91.810196 22.590843 l
91.810196 1.2215439 l
74.186028 1.2215439 l
h
f
Q
q
91.905144 11.225689 m
89.419792 11.225689 l
88.798683 8.0852699 l
91.653084 8.0852699 l
91.283646 6.2215438 l
86.346527 6.2215438 l
88.513176 17.540356 l
93.248352 17.540356 l
92.878914 15.693035 l
90.276436 15.693035 l
89.721962 13.005989 l
92.257797 13.005989 l
91.905144 11.225689 l
W*
0 0 95 24 rc
81.346527 22.540356 m
98.248352 22.540356 l
98.248352 1.2215439 l
81.346527 1.2215439 l
h
f
Q
q
94.227585 7.3813653 m
94.192993 7.3947182 94.144287 7.4014587 94.081337 7.4014587 c
94.020035 7.4014587 l
94.020035 7.1218042 l
94.117958 7.1218042 l
94.176842 7.1218042 94.222878 7.1335044 94.255943 7.1571584 c
94.289009 7.1806855 94.305542 7.2189646 94.305542 7.2716146 c
94.305542 7.324264 94.279602 7.3607631 94.227585 7.3813653 c
h
93.767471 6.607388 m
93.767471 7.5712352 l
93.82724 7.5712352 93.916771 7.5711079 94.035934 7.5707264 c
94.155098 7.5703449 94.221352 7.5697088 94.234703 7.5689459 c
94.311012 7.5634775 94.374344 7.5468178 94.424706 7.5193481 c
94.510422 7.472167 94.553276 7.3956084 94.553276 7.2892914 c
94.553276 7.208282 94.53064 7.1497822 94.485489 7.1137924 c
94.440094 7.0778022 94.384514 7.0563102 94.31839 7.0491881 c
94.379051 7.0365982 94.424706 7.0180306 94.455353 6.9934864 c
94.511948 6.9477038 94.540176 6.8755965 94.540176 6.7772918 c
94.540176 6.691195 l
94.540176 6.6816573 94.540939 6.6722465 94.542213 6.6628356 c
94.54348 6.6534247 94.545769 6.6438866 94.54921 6.6344757 c
94.557983 6.607388 l
94.317368 6.607388 l
94.309486 6.6380367 94.304146 6.6824203 94.301476 6.7406654 c
94.298546 6.7989111 94.293335 6.8382077 94.285446 6.8586826 c
94.272858 6.8925109 94.249207 6.9160376 94.214615 6.9295182 c
94.195793 6.9372759 94.167053 6.9424896 94.128517 6.9447789 c
94.073067 6.9483399 l
94.020035 6.9483399 l
94.020035 6.607388 l
93.767471 6.607388 l
h
93.637756 7.5948892 m
93.49926 7.4533453 93.430084 7.2852221 93.430084 7.0910282 c
93.430084 6.8897128 93.500534 6.7186646 93.641312 6.5778837 c
93.781334 6.4371028 93.950348 6.366776 94.148483 6.366776 c
94.345985 6.366776 94.51474 6.4374843 94.654762 6.5791554 c
94.794647 6.7214627 94.864723 6.8921289 94.864723 7.0910282 c
94.864723 7.284586 94.795029 7.452455 94.656029 7.5948892 c
94.515121 7.7396126 94.345985 7.811974 94.148483 7.811974 c
93.948822 7.811974 93.778534 7.7396126 93.637756 7.5948892 c
h
94.757385 6.4669886 m
94.588249 6.3034434 94.385406 6.2215438 94.148483 6.2215438 c
93.904053 6.2215438 93.697906 6.3053513 93.530296 6.4728384 c
93.36293 6.6404529 93.278999 6.8463469 93.278999 7.0910282 c
93.278999 7.3451209 93.369415 7.5562286 93.550385 7.7247334 c
93.720291 7.8819194 93.919823 7.96064 94.148483 7.96064 c
94.388458 7.96064 94.593338 7.8756881 94.763237 7.7057843 c
94.933144 7.5358806 95.018097 7.3310046 95.018097 7.0910282 c
95.018097 6.8441849 94.931236 6.6360021 94.757385 6.4669886 c
94.757385 6.4669886 l
h
W*
0 0 95 24 rc
88.278999 12.96064 m
100.0181 12.96064 l
100.0181 1.2215439 l
88.278999 1.2215439 l
h
f
ep
end
%%Trailer
%%EOF
