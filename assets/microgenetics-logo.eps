%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 96 17
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 96 17
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
24.754286 13.194285 m
27.257143 13.194285 l
27.257143 4.7942858 l
25.645714 4.7942858 l
25.645714 10.451428 l
25.645714 11.137143 l
25.645714 11.822857 l
24.068571 4.7942858 l
22.388571 4.7942858 l
20.811428 11.822857 l
20.811428 11.137143 l
20.811428 10.451428 l
20.811428 4.7942858 l
19.200001 4.7942858 l
19.200001 13.194285 l
21.737143 13.194285 l
23.245714 6.6114287 l
24.754286 13.194285 l
h
W
0 0 96 17 rc
14.2 18.194286 m
32.257141 18.194286 l
32.257141 -0.20571429 l
14.2 -0.20571429 l
h
f
Q
q
30.445715 11.72 m
28.799999 11.72 l
28.799999 13.228572 l
30.445715 13.228572 l
30.445715 11.72 l
h
28.799999 11 m
30.445715 11 l
30.445715 4.7942858 l
28.799999 4.7942858 l
28.799999 11 l
h
W
0 0 96 17 rc
23.799999 18.228571 m
35.445713 18.228571 l
35.445713 -0.20571429 l
23.799999 -0.20571429 l
h
f
Q
q
35.622856 8.7714281 m
35.58857 9.0114288 35.52 9.2171431 35.382858 9.3885717 c
35.21143 9.6285715 34.902859 9.7657146 34.525715 9.7657146 c
33.977142 9.7657146 33.599998 9.4914284 33.394287 8.9428568 c
33.291428 8.6685715 33.222858 8.257143 33.222858 7.8114285 c
33.222858 7.3657141 33.291428 6.9885716 33.394287 6.7142859 c
33.599998 6.1999998 33.942856 5.9257145 34.491428 5.9257145 c
34.868572 5.9257145 35.142857 6.0285716 35.314285 6.2342858 c
35.485714 6.4400001 35.554287 6.7142859 35.58857 7.0228572 c
37.234287 7.0228572 l
37.200001 6.5428572 37.028572 6.0628572 36.685715 5.6171427 c
36.171429 4.8971429 35.417141 4.5542855 34.422855 4.5542855 c
33.42857 4.5542855 32.708572 4.8628573 32.228573 5.4457145 c
31.748571 6.0285716 31.508572 6.817143 31.508572 7.742857 c
31.508572 8.8057146 31.782858 9.6285715 32.297142 10.211429 c
32.811428 10.794286 33.531429 11.102858 34.457142 11.102858 c
35.245716 11.102858 35.862858 10.931429 36.377144 10.588572 c
36.857143 10.245714 37.165714 9.6285715 37.26857 8.7371426 c
35.622856 8.7371426 l
35.622856 8.7714281 l
h
W
0 0 96 17 rc
26.508572 16.102858 m
42.26857 16.102858 l
42.26857 -0.44571429 l
26.508572 -0.44571429 l
h
f
Q
q
41.794285 11.137143 m
41.931427 11.137143 l
41.931427 9.4571428 l
41.828571 9.4571428 41.725716 9.4914284 41.657143 9.4914284 c
41.451427 9.4914284 l
40.799999 9.4914284 40.354286 9.2857141 40.148571 8.8400002 c
40.011429 8.6000004 39.977142 8.2228575 39.977142 7.742857 c
39.977142 4.7942858 l
38.365715 4.7942858 l
38.365715 11 l
39.908573 11 l
39.908573 9.9028568 l
40.148571 10.314285 40.388573 10.588572 40.560001 10.76 c
40.868572 11 41.245716 11.137143 41.725716 11.137143 c
41.759998 11.137143 41.794285 11.137143 41.794285 11.137143 c
h
W
0 0 96 17 rc
33.365715 16.137142 m
46.931427 16.137142 l
46.931427 -0.20571429 l
33.365715 -0.20571429 l
h
f
Q
q
48 5.5485716 m
47.485714 4.8971429 46.697144 4.5885715 45.634285 4.5885715 c
44.57143 4.5885715 43.782856 4.8971429 43.26857 5.5485716 c
42.754284 6.1999998 42.48 6.9885716 42.48 7.8800001 c
42.48 8.7714281 42.754284 9.5600004 43.26857 10.211429 c
43.782856 10.862857 44.57143 11.205714 45.634285 11.205714 c
46.697144 11.205714 47.485714 10.862857 48 10.211429 c
48.514286 9.5600004 48.78857 8.7714281 48.78857 7.8800001 c
48.754284 6.9885716 48.514286 6.1999998 48 5.5485716 c
h
46.697144 6.4400001 m
46.937141 6.7828569 47.074287 7.262857 47.074287 7.8800001 c
47.074287 8.4971428 46.937141 8.9771433 46.697144 9.3199997 c
46.457142 9.6628571 46.080002 9.8342857 45.599998 9.8342857 c
45.119999 9.8342857 44.777142 9.6628571 44.502857 9.3199997 c
44.262856 8.9771433 44.125713 8.4971428 44.125713 7.8800001 c
44.125713 7.262857 44.262856 6.7828569 44.502857 6.4400001 c
44.742859 6.0971427 45.119999 5.9257145 45.599998 5.9257145 c
46.080002 5.9257145 46.457142 6.0971427 46.697144 6.4400001 c
h
W
0 0 96 17 rc
37.48 16.205715 m
53.78857 16.205715 l
53.78857 -0.41142857 l
37.48 -0.41142857 l
h
f
Q
q
52.971428 11 m
53.348572 10.828571 53.691429 10.554286 53.931427 10.108571 c
53.931427 11 l
55.508572 11 l
55.508572 5.1028571 l
55.508572 4.3142858 55.371429 3.6971428 55.097141 3.2857144 c
54.651428 2.5999999 53.759998 2.2228572 52.457142 2.2228572 c
51.668571 2.2228572 51.017143 2.3942857 50.537144 2.7028573 c
50.022858 3.0114286 49.748573 3.4914286 49.714287 4.1085715 c
51.462856 4.1085715 l
51.497143 3.9028571 51.565716 3.7657142 51.668571 3.6971428 c
51.84 3.5599999 52.148571 3.4914286 52.560001 3.4914286 c
53.142857 3.4914286 53.52 3.6971428 53.725716 4.0742855 c
53.862858 4.3142858 53.931427 4.7600002 53.931427 5.3428574 c
53.931427 5.7542858 l
53.759998 5.48 53.622856 5.2742858 53.417141 5.1714287 c
53.10857 4.9314284 52.662857 4.7942858 52.148571 4.7942858 c
51.360001 4.7942858 50.708572 5.0685716 50.262856 5.6171427 c
49.782856 6.1657143 49.542858 6.9200001 49.542858 7.8800001 c
49.542858 8.8057146 49.782856 9.5600004 50.228573 10.211429 c
50.674286 10.828571 51.325714 11.137143 52.182858 11.137143 c
52.491428 11.137143 52.765713 11.102858 52.971428 11 c
h
53.52 6.5428572 m
53.794285 6.817143 53.897144 7.297143 53.897144 7.9142857 c
53.897144 8.4971428 53.759998 8.9428568 53.52 9.2514286 c
53.279999 9.5600004 52.937141 9.6971426 52.525715 9.6971426 c
51.977142 9.6971426 51.565716 9.4228573 51.360001 8.9085712 c
51.257141 8.6342859 51.188572 8.257143 51.188572 7.8457141 c
51.188572 7.4685717 51.257141 7.1599998 51.360001 6.8857141 c
51.565716 6.3714285 51.977142 6.0971427 52.525715 6.0971427 c
52.937141 6.1314287 53.279999 6.2685714 53.52 6.5428572 c
h
W
0 0 96 17 rc
44.542858 16.137142 m
60.508572 16.137142 l
60.508572 -2.7771428 l
44.542858 -2.7771428 l
h
f
Q
q
61.062859 10.862857 m
61.508572 10.657143 61.851429 10.348572 62.125713 9.9371433 c
62.365715 9.5600004 62.537144 9.148571 62.605713 8.6685715 c
62.639999 8.3942862 62.674286 7.9828572 62.674286 7.4342856 c
58.182858 7.4342856 l
58.217144 6.817143 58.422855 6.3714285 58.834286 6.1314287 c
59.074287 5.96 59.382858 5.8914285 59.725716 5.8914285 c
60.102856 5.8914285 60.377144 5.9942856 60.617142 6.1657143 c
60.754284 6.2685714 60.857143 6.4057145 60.959999 6.5771427 c
62.605713 6.5771427 l
62.57143 6.1999998 62.365715 5.8228574 62.022858 5.4457145 c
61.474285 4.8285713 60.685715 4.5542855 59.691429 4.5542855 c
58.868572 4.5542855 58.148571 4.7942858 57.531429 5.3085713 c
56.914288 5.8228574 56.57143 6.6457143 56.57143 7.777143 c
56.57143 8.8400002 56.845715 9.6628571 57.42857 10.245714 c
58.011429 10.828571 58.73143 11.102858 59.622856 11.102858 c
60.137142 11.171429 60.617142 11.068571 61.062859 10.862857 c
h
58.628571 9.4571428 m
58.388573 9.2171431 58.251427 8.9085712 58.182858 8.4971428 c
60.959999 8.4971428 l
60.925713 8.9428568 60.78857 9.2514286 60.514286 9.4914284 c
60.240002 9.7314281 59.931427 9.8342857 59.554287 9.8342857 c
59.177143 9.8342857 58.868572 9.6971426 58.628571 9.4571428 c
h
W
0 0 96 17 rc
51.57143 16.124014 m
67.674286 16.124014 l
67.674286 -0.44571429 l
51.57143 -0.44571429 l
h
f
Q
q
68.571426 10.622857 m
68.982857 10.28 69.188568 9.7314281 69.188568 8.9428568 c
69.188568 4.7600002 l
67.542854 4.7600002 l
67.542854 8.5314283 l
67.542854 8.8742857 67.508568 9.1142855 67.405716 9.2857141 c
67.234283 9.594286 66.959999 9.7657146 66.514282 9.7657146 c
65.965714 9.7657146 65.58857 9.5257139 65.382858 9.0799999 c
65.279999 8.8400002 65.211426 8.5314283 65.211426 8.1199999 c
65.211426 4.7600002 l
63.599998 4.7600002 l
63.599998 10.931429 l
65.177139 10.931429 l
65.177139 10.04 l
65.382858 10.348572 65.58857 10.588572 65.760002 10.725715 c
66.102859 10.965714 66.514282 11.102858 67.028572 11.102858 c
67.645714 11.137143 68.160004 10.965714 68.571426 10.622857 c
h
W
0 0 96 17 rc
58.599998 16.107162 m
74.188568 16.107162 l
74.188568 -0.23999999 l
58.599998 -0.23999999 l
h
f
Q
q
74.708572 10.862857 m
75.154289 10.657143 75.497147 10.348572 75.771431 9.9371433 c
76.011429 9.5600004 76.182854 9.148571 76.251427 8.6685715 c
76.285713 8.3942862 76.32 7.9828572 76.32 7.4342856 c
71.828575 7.4342856 l
71.862854 6.817143 72.068573 6.3714285 72.480003 6.1314287 c
72.720001 5.96 73.028572 5.8914285 73.371429 5.8914285 c
73.748573 5.8914285 74.022858 5.9942856 74.262856 6.1657143 c
74.400002 6.2685714 74.502853 6.4057145 74.605713 6.5771427 c
76.251427 6.5771427 l
76.21714 6.1999998 76.011429 5.8228574 75.668571 5.4457145 c
75.120003 4.8285713 74.331429 4.5542855 73.337143 4.5542855 c
72.514282 4.5542855 71.794289 4.7942858 71.177139 5.3085713 c
70.559998 5.8228574 70.21714 6.6457143 70.21714 7.777143 c
70.21714 8.8400002 70.491432 9.6628571 71.074287 10.245714 c
71.657143 10.828571 72.377144 11.102858 73.26857 11.102858 c
73.78286 11.171429 74.297142 11.068571 74.708572 10.862857 c
h
72.308571 9.4571428 m
72.068573 9.2171431 71.931427 8.9085712 71.862854 8.4971428 c
74.639999 8.4971428 l
74.605713 8.9428568 74.468575 9.2514286 74.194283 9.4914284 c
73.919998 9.7314281 73.611427 9.8342857 73.234283 9.8342857 c
72.85714 9.8342857 72.514282 9.6971426 72.308571 9.4571428 c
h
W
0 0 96 17 rc
65.21714 16.124014 m
81.32 16.124014 l
81.32 -0.44571429 l
65.21714 -0.44571429 l
h
f
Q
q
76.628571 9.7657146 m
76.628571 10.931429 l
77.485718 10.931429 l
77.485718 12.645715 l
79.097145 12.645715 l
79.097145 10.931429 l
80.091431 10.931429 l
80.091431 9.7657146 l
79.097145 9.7657146 l
79.097145 6.4742856 l
79.097145 6.2342858 79.131432 6.0628572 79.199997 5.9942856 c
79.26857 5.9257145 79.474289 5.8914285 79.78286 5.8914285 c
79.954285 5.8914285 l
80.125717 5.8914285 l
80.125717 4.6914287 l
79.371429 4.6571426 l
78.617142 4.6228571 78.102859 4.7600002 77.794289 5.0685716 c
77.622856 5.2399998 77.519997 5.5485716 77.519997 5.9257145 c
77.519997 9.7657146 l
76.628571 9.7657146 l
h
W
0 0 96 17 rc
71.628571 17.645714 m
85.125717 17.645714 l
85.125717 -0.34799999 l
71.628571 -0.34799999 l
h
f
Q
q
82.800003 11.72 m
81.154289 11.72 l
81.154289 13.228572 l
82.800003 13.228572 l
82.800003 11.72 l
h
81.154289 11 m
82.800003 11 l
82.800003 4.7942858 l
81.154289 4.7942858 l
81.154289 11 l
h
W
0 0 96 17 rc
76.154289 18.228571 m
87.800003 18.228571 l
87.800003 -0.20571429 l
76.154289 -0.20571429 l
h
f
Q
q
87.977142 8.7714281 m
87.942856 9.0114288 87.874283 9.2171431 87.737144 9.3885717 c
87.565712 9.6285715 87.257141 9.7657146 86.879997 9.7657146 c
86.331429 9.7657146 85.954285 9.4914284 85.748573 8.9428568 c
85.645714 8.6685715 85.577141 8.257143 85.577141 7.8114285 c
85.577141 7.3657141 85.645714 6.9885716 85.748573 6.7142859 c
85.954285 6.1999998 86.297142 5.9257145 86.845711 5.9257145 c
87.222855 5.9257145 87.497147 6.0285716 87.668571 6.2342858 c
87.839996 6.4400001 87.908569 6.7142859 87.942856 7.0228572 c
89.58857 7.0228572 l
89.554283 6.5428572 89.382858 6.0628572 89.040001 5.6171427 c
88.525711 4.8971429 87.771431 4.5542855 86.777145 4.5542855 c
85.78286 4.5542855 85.062859 4.8628573 84.582855 5.4457145 c
84.102859 6.0285716 83.862854 6.817143 83.862854 7.742857 c
83.862854 8.8057146 84.137146 9.6285715 84.651428 10.211429 c
85.165718 10.794286 85.885712 11.102858 86.811432 11.102858 c
87.599998 11.102858 88.21714 10.931429 88.73143 10.588572 c
89.211426 10.245714 89.519997 9.6285715 89.622856 8.7371426 c
87.977142 8.7371426 l
87.977142 8.7714281 l
h
W
0 0 96 17 rc
78.862854 16.102858 m
94.622856 16.102858 l
94.622856 -0.44571429 l
78.862854 -0.44571429 l
h
f
Q
q
91.988571 6.7828569 m
92.022858 6.5085716 92.091431 6.3028569 92.194283 6.1657143 c
92.400002 5.96 92.777145 5.8571429 93.325714 5.8571429 c
93.634285 5.8571429 93.908569 5.8914285 94.080002 5.9942856 c
94.251427 6.0971427 94.354286 6.2342858 94.354286 6.4057145 c
94.354286 6.5771427 94.285713 6.7142859 94.114288 6.817143 c
93.977142 6.9200001 93.394287 7.0914288 92.434288 7.297143 c
91.748573 7.4685717 91.234283 7.6742859 90.959999 7.9485712 c
90.685715 8.2228575 90.514282 8.5657139 90.514282 9.0799999 c
90.514282 9.6628571 90.754288 10.142858 91.199997 10.554286 c
91.645714 10.965714 92.297142 11.171429 93.085716 11.171429 c
93.874283 11.171429 94.491432 11 94.971428 10.691428 c
95.451431 10.382857 95.725716 9.8342857 95.794289 9.0799999 c
94.182854 9.0799999 l
94.148575 9.2857141 94.114288 9.4571428 94.011429 9.5600004 c
93.839996 9.7657146 93.531425 9.9028568 93.085716 9.9028568 c
92.742859 9.9028568 92.468575 9.8342857 92.331429 9.7314281 c
92.194283 9.6285715 92.091431 9.4914284 92.091431 9.3542852 c
92.091431 9.1828575 92.160004 9.0457144 92.331429 8.9428568 c
92.502853 8.8400002 93.05143 8.702857 94.011429 8.4971428 c
94.662857 8.3599997 95.14286 8.1199999 95.451431 7.8114285 c
95.760002 7.5028572 95.931427 7.1257143 95.931427 6.6457143 c
95.931427 6.0285716 95.691429 5.5142856 95.245712 5.1371427 c
94.800003 4.7600002 94.080002 4.5542855 93.120003 4.5542855 c
92.160004 4.5542855 91.440002 4.7600002 90.959999 5.1714287 c
90.480003 5.5828571 90.274284 6.0971427 90.274284 6.7485714 c
91.988571 6.7485714 l
91.988571 6.7828569 l
h
W
0 0 96 17 rc
85.274284 16.171429 m
100.93143 16.171429 l
100.93143 -0.44571429 l
85.274284 -0.44571429 l
h
f
Q
1 0 0 sc
q
8.2285719 12.885715 m
10.011429 12.885715 11.177143 12.028571 12.068571 11.034286 c
12.137143 10.965714 12.171429 10.897142 12.24 10.828571 c
12.308572 10.76 12.342857 10.691428 12.411428 10.622857 c
12.72 10.245714 12.96 9.8342857 13.2 9.4914284 c
13.371428 9.2514286 13.508572 9.0114288 13.68 8.8057146 c
13.748571 8.7371426 13.782857 8.6685715 13.851429 8.6000004 c
13.92 8.5314283 13.954286 8.4628572 14.022857 8.3942862 c
14.674286 7.6057143 15.325714 7.0914288 16.285715 7.0228572 c
16.422857 7.6057143 16.491428 8.188571 16.491428 8.8057146 c
16.491428 9.4228573 16.422857 10.04 16.285715 10.588572 c
15.325714 10.52 14.674286 10.04 14.022857 9.2171431 c
13.92 9.3885717 13.782857 9.5600004 13.645715 9.7657146 c
13.371428 10.142858 13.097143 10.588572 12.754286 11.034286 c
13.44 11.822857 14.297143 12.508572 15.462857 12.782857 c
14.022857 15.285714 11.314285 17 8.2285719 17 c
5.1428571 17 2.4342856 15.285714 1.0285715 12.782857 c
2.1942856 12.508572 3.0171428 11.822857 3.7371428 11.034286 c
3.8057144 10.965714 3.8399999 10.897142 3.9085715 10.828571 c
3.9771428 10.76 4.0114284 10.691428 4.0799999 10.622857 c
4.4228573 10.211429 4.6971431 9.7657146 4.9714284 9.3542852 c
5.1085715 9.148571 5.2114286 8.9771433 5.3485713 8.8057146 c
5.4171429 8.7371426 5.4514284 8.6685715 5.52 8.5657139 c
5.5885715 8.4971428 5.6228571 8.4285717 5.6914287 8.3257141 c
6.4114285 7.3314285 7.1314287 6.6457143 8.2628574 6.6457143 c
8.2628574 6.6457143 l
9.3942862 6.6457143 10.114285 7.3314285 10.834286 8.3257141 c
10.902857 8.188571 11.005714 8.0857143 11.074286 7.9485712 c
11.382857 7.5028572 11.691428 6.9885716 12.068571 6.5428572 c
11.211429 5.5485716 10.011429 4.6914287 8.2285719 4.6914287 c
6.4457145 4.6914287 5.2800002 5.5485716 4.3885713 6.5428572 c
4.3200002 6.6114287 4.2857141 6.6799998 4.2171431 6.7485714 c
4.1485715 6.817143 4.1142859 6.8857141 4.0457144 6.9542856 c
3.7371428 7.3314285 3.4971428 7.742857 3.2571428 8.0857143 c
3.0857143 8.3257141 2.9485714 8.5657139 2.7771428 8.7714281 c
2.7085714 8.8400002 2.6742857 8.9085712 2.6057143 8.9771433 c
2.5371428 9.0457144 2.5028572 9.1142855 2.4342856 9.1828575 c
1.7828572 9.9714289 1.1314286 10.485714 0.17142858 10.554286 c
0.068571426 10.005714 0 9.3885717 0 8.7714281 c
0 8.1542854 0.068571426 7.5371428 0.20571429 6.9885716 c
1.1657143 7.0571427 1.8171428 7.5371428 2.4685714 8.3599997 c
2.5714285 8.188571 2.7085714 8.0171432 2.8457143 7.8114285 c
3.1199999 7.4342856 3.3942857 6.9885716 3.7371428 6.5428572 c
3.0514286 5.7542858 2.1942856 5.0685716 1.0285715 4.7942858 c
2.4342856 2.2571428 5.1428571 0.54285717 8.2285719 0.54285717 c
11.314285 0.54285717 14.022857 2.2571428 15.428572 4.7600002 c
14.262857 5.0342855 13.44 5.7199998 12.72 6.5085716 c
12.651428 6.5771427 12.617143 6.6457143 12.548572 6.7142859 c
12.48 6.7828569 12.445714 6.8514285 12.377143 6.9200001 c
12.034286 7.3314285 11.76 7.777143 11.485714 8.188571 c
11.348572 8.3942862 11.245714 8.5657139 11.108571 8.7371426 c
11.04 8.8057146 11.005714 8.8742857 10.937143 8.9771433 c
10.868571 9.0457144 10.834286 9.1142855 10.765715 9.2171431 c
10.045714 10.211429 9.3257141 10.897142 8.1942854 10.897142 c
8.1942854 10.897142 l
7.0628572 10.897142 6.3428574 10.211429 5.6228571 9.2171431 c
5.5542855 9.3542852 5.4514284 9.4571428 5.3828573 9.594286 c
5.0742855 10.04 4.7657142 10.554286 4.3885713 11 c
5.2800002 12.028571 6.4457145 12.885715 8.2285719 12.885715 c
h
W
0 0 96 17 rc
-5 22 m
21.491428 22 l
21.491428 -4.4571428 l
-5 -4.4571428 l
h
f
ep
end
%%Trailer
%%EOF
